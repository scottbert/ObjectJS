(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

/**
 * @author Scott van Looy
 */

/**
 * takes two arrays of strings and combines them, removing duplicates
 * @method combine
 * @param  {Array} arr1 first array to combine
 * @param  {Array} arr2 second array to combine
 * @return {Array}      deduped unsorted array of strings
 */

function combine(arr1, arr2) {
    var tarr = arr1.concat(arr2),
        l = tarr.length,
        o = {},
        ret = [],
        n,
        name;
    for (n = 0; n < l; n++) {
        o[tarr[n]] = true;
    }
    for (name in o) {
        if (o.hasOwnProperty(name)) {
            ret.push(name);
        }
    }
    return ret;
}
/**
 * returns true if we are an array.
 * @method isArray
 * @param  {Array}  o [description]
 * @return {Boolean}   [description]
 */

function isArray(o) {
    return Array.isArray(o);
}

exports.combine = combine;
exports.isArray = isArray;

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Shared = require('./Shared');

function baseController(mixin) {
    /** PRIVATE METHODS **/
    var BaseController = (0, _Shared.augmentObject)({});

    /** API METHODS **/
    /**
     * On enter of your child controller, you call the view associated with that controller
     * using the callView method. It either instantiates the view or if it already exists
     * it calls "enter" on it. Your view's init must also call enter
     * @param  {Object} namespace your namespace
     * @param  {string} view      the name of the view you're calling.
     * @return {Object}           returns the instantiated view.
     */
    BaseController.callView = function callView(namespace, view) {
        if (typeof namespace === 'undefined' || typeof view === 'undefined') {
            BaseController.err('tried to call', view, 'on ', namespace, 'namespace');
            return null;
        }
        if (typeof namespace[view] === 'function') {
            namespace[view] = new namespace[view]();
            namespace[view].controller = this;
            this.view = namespace[view];
        } else {
            namespace[view].enter();
        }
        return namespace[view];
    };
    /**
     * removes tokens in a string and replaces them with values.
     * @param  {string} string  the string to replace tokens in:
     * in the format of "this is my/{token1}-{token2}/string/{token-3}"
     * @param  {Object} tokens an object of tokens to replace:
     * {
     *   token1: 'bert',
     *   token2: 'fred',
     *   token3: 12
     * }
     * @return {string}         tokenised string.
     */
    BaseController.tokeniser = function tokeniser(string, tokens) {
        if (typeof string === 'undefined' || typeof tokens === 'undefined') {
            BaseController.err('tried to tokenise', string, 'with ', tokens);
            return null;
        }
        var token;
        for (token in tokens) {
            if (tokens.hasOwnProperty(token)) {
                string = string.split('{' + token + '}').join(tokens[token]);
            }
        }
        return string;
    };
    /**
     * getData - gets DATA from an external resource using JSON/JSONP. Will POST
     * for JSON requests, can only GET for JSONP. Technically, JSONP is insecure,
     * be very careful when using it, make sure the 3rd party is trustworthy.
     * @param  {Object} options an object containing the information you require.
     *
     * <pre>
     * {
     *   url:{string}          the URL we get the data from. If JSONP, should either
     *                         include ?callback= parameter for services that don't
     *                         allow dynamic callback assignments, or be callback
     *                         parameter free to allow this code to assign one.
     *
     *   data:{string},        name value pairs
     *
     *   success:{function()}, callback function on success. This will be passed
     *                         a data object.
     *
     *   error:{function()},   callback function to do something on error. This will
     *                         be passed an object representing the error.
     *
     *   jsonp:{string}        when set, forces JSONP with the specified string as callback name
     * }
     *
     * </pre>
     */
    BaseController.getData = function getData(options) {
        var xhr;
        if (options.url && typeof options.url === 'string') {
            if (!BaseController.createXHR || !BaseController.createJSONP) {
                mixin.Controller(BaseController);
            }
            // If we're on the same domain, we need to do an XHR request, if not we do a JSONP.
            if (options.url.indexOf('://') === -1 || options.url.match(window.location.protocol) && options.url.indexOf(window.location.host) !== -1 && !options.jsonp) {
                xhr = BaseController.createXHR();
            } else {
                xhr = BaseController.createJSONP(options.jsonp || true);
            }
            xhr.open(options);
        }
    };
    BaseController.createController = BaseController.extend.curry(undefined, BaseController);
    return BaseController;
}
/**
 * @author Scott van Looy
 */

exports.default = baseController;

},{"./Shared":8}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Shared = require('./Shared');

function baseUI(mixin) {

    var BaseUI = (0, _Shared.augmentObject)({});

    function f(fn) {
        return typeof fn === 'function';
    }

    /** API METHODS **/
    /**
     * Sets the root dom node that the library uses to find other dom nodes when generating UI components. Defaults to body.
     * @param {String|Object} domNode the selector for the domNode
     */
    BaseUI.setRootDomNode = function setRootDomNode(domNode) {
        BaseUI.root = mixin.Selector(domNode);
    };
    /**
     * Sets up a UI, caches its domnode and prepares it for use.
     * @param {String|Object} id - the dom ID, className or jQuery object of the root element for the UI.
     */
    BaseUI.setupUI = function setupUI(id) {
        var self = this;
        function setup() {
            self.domNode = BaseUI.root ? BaseUI.root.find(id) : mixin.Selector(id);
            self.contentNode = self.domNode.find('.content');
            self.titleNode = self.domNode.find('.title');
            self.templateNode = self.domNode.find('.template').remove();
            self.footerNode = self.domNode.find('.footer');
        }
        if (!self.init) {
            mixin.UI(self);
        }
        setup();
    };
    /**
     * Sets the active view on a UI object
     * @param {Object} view a reference to the view we wish to set on the UI object.
     */
    BaseUI.setView = function setView(view) {
        this.view = view;
    };
    /**
     * Gets a reference to the currently set view on a UI object
     * @return {Object} a reference to the currently set view
     */
    BaseUI.getView = function getView() {
        return this.view;
    };
    /**
     *
     * Opens a UI object. Adds a class of "open" to the UI's domNode. Either animate using CSS3
     * or override this to create a Javascript animation.
     * @param  {Object} obj A reference to the UI object
     * @return {Object}     a reference to the UI object (for chaining).
     */
    BaseUI.open = function open(obj) {
        obj = obj || this;
        obj.domNode.addClass('open');
        obj.isOpen = true;
        return obj;
    };
    /**
     * Closes a UI object. Removes the class "open" from the UI's domNode. Either animate using CSS3 or override
     * this to create a Javascript animation.
     * @param  {Function} [cb] Callback to run when the close is complete.
     * @return {Object}     a reference to the UI object (for chaining).
     */
    BaseUI.close = function close(cb) {
        this.domNode.removeClass('open');
        this.isOpen = false;
        if (cb && f(cb)) {
            cb();
        }
        return this;
    };
    /**
     * Returns the contentNode for a UI.
     * @return {Object} a .content node or the domNode of the UI in question.
     */
    BaseUI.getContentNode = function () {
        return this.contentNode;
    };
    /**
     * Add methods to the UI object you're creating. Automatically create super methods when the object you're
     * passing in contains thesame methods as its parent.
     * @param {Object} options Object containing the methods you wish to add to the host object.
     */
    BaseUI.addMethods = function (options) {
        var method, args;
        for (method in options) {
            if (options.hasOwnProperty(method) && typeof method === 'function') {
                if (!this[method]) {
                    this[method] = options[method];
                } else {
                    options['super' + method] = this[method];
                    this[method] = function () {
                        if (arguments.length === 1) {
                            args = arguments[0];
                        } else {
                            args = arguments;
                        }
                        options[method](args);
                        options['super' + method](args);
                    };
                }
            }
        }
    };
    /**
     * Takes an object and extends it with the BaseUI
     * @param {Object} object to extend;
     * @return {Object} extended object
     */
    BaseUI.createUI = BaseUI.extend.curry(undefined, BaseUI);
    return BaseUI;
} /**
   * @author Scott van Looy
   */

exports.default = baseUI;

},{"./Shared":8}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Shared = require('./Shared');

var _ArrayUtils = require('./ArrayUtils');

/**
 * @author Scott van Looy
 */

/** PRIVATE METHODS **/
function baseView(mixin) {
    var BaseView = (0, _Shared.augmentObject)({}),
        defaults = [],
        loadComponents = function loadComponents(namespace, uisArray, view, addToDefaults) {
        var arr = (0, _ArrayUtils.combine)(defaults, uisArray),
            l = arr.length,
            ret = {};
        view = view || {};
        while (l--) {
            if (arr[l] && namespace[arr[l]]) {
                if (typeof namespace[arr[l]] === 'function') {
                    namespace[arr[l]] = new namespace[arr[l]](view);
                } else {
                    namespace[arr[l]].setView(view);
                }
                if (addToDefaults) {
                    defaults.push(arr[l]);
                }
                ret[arr[l]] = namespace[arr[l]];
            }
        }
        return ret;
    };
    /** API METHODS **/
    /**
     * Sets default UIs. These UIs appear on every page. Should only be
     * called once in your project as it replaces everything each time.
     * generally you would call this from your app view.
     * @param {Object} ns - the namespace your UIs can be found under.
     * @param {String} arr - An array of UI names.
     */
    BaseView.setDefaultComponents = function setDefaultComponents(namespace, arr) {
        defaults = [];
        return loadComponents(namespace, arr, null, true);
    };
    /**
     * returns the array of default components.
     * @return {Array} [description]
     */
    BaseView.getDefaultComponents = function getDefaultComponents() {
        return defaults;
    };
    /**
     * All views require a set of components that exist within that view. Every
     * view should have an enter method that calls requires and adds the following.
     * @param  {Object} namespace your namespace
     * @param  {String[]} arr       an array of strings containing UI component names
     * @param  {Object}                a reference to the view object
     * @return {String[]}           array of objects
     */
    BaseView.requires = function requires(namespace, arr, view) {
        var uiMap = (0, _ArrayUtils.combine)(arr, defaults);
        view.uis = loadComponents(namespace, uiMap, view);
        return view.uis;
    };
    BaseView.routes = function () {
        //write code
    };
    BaseView.captureRoutes = function routes() {
        //write code
    };
    BaseView.captureForms = function captureForms() {
        //write code
    };
    /**
     * Takes an object and extends it with the BaseView
     * @param {Object} object to extend;
     * @return {Object} extended object
     */
    BaseView.createView = BaseView.extend.curry(undefined, BaseView);
    /**
     * This is where you can find an object representing your UIs once you've called requires
     * @type {Object}
     */
    BaseView.uis = null;
    /**
     * This is a reference to the controller that instantiated the view
     * @type {Object}
     */
    BaseView.controller = null;

    return BaseView;
}
exports.default = baseView;

},{"./ArrayUtils":1,"./Shared":8}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Shared = require('./Shared');

var _BaseUI = require('./BaseUI');

var _BaseUI2 = _interopRequireDefault(_BaseUI);

var _BaseController = require('./BaseController');

var _BaseController2 = _interopRequireDefault(_BaseController);

var _BaseView = require('./BaseView');

var _BaseView2 = _interopRequireDefault(_BaseView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @author Scott van Looy
 * @name { ObjectJS:[name]}
 */
function ojs(options) {
    var currentView = void 0,
        views = void 0,
        Mixin = options.Mixin,
        Selector = Mixin.Selector;

    function ObjectJS(node) {
        return Selector(node);
    }

    /**
     * The base URL for library scripts - determined by the location of
     * object.min?.js
     * @return {string}
     */

    var BASE_URL = function () {
        if (!document) {
            return null;
        }
        var s = document.getElementsByTagName('script');
        var m = s[s.length - 1];
        return m.src.replace(/[^\/]+?$/, '');
    }();

    /**
     * Load a script asynchronously.
     * @param  {string}   src  href of the script to load.
     * @param  {Function} cb   callback to fire upon loading.
     * @param  {Number}   load Scripts remaining to load.
     * @param  {Number}   len  Total scripts to load
     * @param  {Number}   num  Script index
     * @param  {Function}   err  Something to do on error.
     */
    function loadScript(src, cb, load, len, num, err) {

        function loaded() {
            var state = s.state;
            if (!state || /loaded|complete/.test(state)) {
                load--;
                if (!load && len === num) {
                    if (cb && typeof cb === 'function' && !cb.called) {
                        cb.call(this);
                        cb.called = true;
                    }
                }
            }
        }

        function error() {
            if (err && typeof err === 'function' && !err.called) {
                err.call(this);
                err.called = true;
            }
        }
        var s = document.createElement('script');
        s.type = 'text/javascript';
        s.src = src;
        s.async = false;
        s.onload = s.onreadystatechange = loaded;
        s.onerror = error;
        ObjectJS('head').append(s);
    }

    /**
     * Requests a namespace. If the namespace does not exist, it will
     * be created
     * @param {String} req - request in the format of 'my.name.space'
     * @param {Object} test - test for a mamespace.
     * @return {Object|false} The namespace or false if test is true and the namespace doesn't exist
     */
    function reqNameSpace(req, test) {
        var t, x, tns, l;
        if (!req || typeof req !== 'string') {
            (0, _Shared.err)('getNameSpace error - requires a string in the format "my.name.space"');
            return null;
        }
        if (!req.match('\\.')) {
            t = [req];
        } else {
            t = req.split('.');
        }
        tns = window;
        l = t.length;
        for (x = 0; x < l; x++) {
            if (tns[t[x]]) {
                tns = tns[t[x]];
            } else {
                if (test) {
                    return false;
                }
                tns = tns[t[x]] = {};
            }
        }
        return tns;
    }
    /**
     * requires method. Using the location of object.min?.js as the base, can
     * load other modules. Checks to see if they exist and if they don't, we grab
     * the module.
     * @param {Array} requires - array of strings representing a component's path.
     * 'myapp/main/Hello.js' would be written as 'myapp.main.Hello' and Hello.js
     * would contains an object at the same namespace
     * (myapp.main.Hello = (function(){}()))
     * @param {Function} [callback]. Optional callback to run when loading is complete.
     */
    function requires(requires, callback, oj) {
        var l = requires.length,
            src,
            load = 0,
            n,
            docallback = false,
            namespaceTest;
        oj = oj || 'ns';
        namespaceTest = function namespaceTest(namespace, test) {
            var ret = namespace,
                strArr = test.split('.'),
                l = strArr.length,
                p;
            // Find starting point. Either our own namespace or the window. If neither, return false.
            if (!ret[strArr[0]] && !window[strArr[0]]) {
                return undefined;
            }
            // If starting point is the window, set window to the return value.
            if (!ret[strArr[0]] && window[strArr[0]]) {
                ret = window;
            }
            for (p = 0; p < l; p++) {
                if (ret !== undefined) {
                    ret = ret[strArr[p]];
                }
            }
            return ret;
        };
        if (typeof requires === 'string') {
            requires = [requires];
            l = requires.length;
        }
        for (n = 0; n < l; n++) {
            docallback = false;
            src = null;
            if (namespaceTest(oj, requires[n]) === undefined) {
                src = BASE_URL + requires[n].replace(/\./gi, '/') + '.js';
                if (oj.finished) {
                    loadScript(src, callback, load, requires.length, n);
                } else {
                    docallback = true;
                    document.write('<script type="text/javascript" src="' + src + '"><\/script>');
                }
            } else {
                // We already have this item. Run callback.
                docallback = true;
            }
        }
        if (docallback) {
            if (callback) {
                callback();
            }
        }
    }

    /**
     * Initialise an object
     * @param  {String}   obj the name of the object to initialise
     * @param  {Object}   ns  the namespace it lives in
     * @param  {String} [fn]  A function to run on the newly initialised object.
     * @return {Object}       The new object
     */
    function initObj(obj, ns, fn) {
        if (!ns || !ns[obj]) {
            (0, _Shared.err)('Attempted to init object', obj, 'in namespace', ns, 'failed.');
            return null;
        }
        if (typeof ns[obj] === 'function') {
            ns[obj] = new ns[obj]();
        }
        if (ns[obj][fn]) {
            ns[obj][fn]();
        }
        return ns[obj];
    }
    /**
     * Returns a reference to the current active view.
     * @return {Object} a reference to the current active view.
     */
    function getView() {
        return currentView;
    }
    /**
     * Calls a view. Used at the bottom of an HTML page to call the associated JS view with that page.
     * @param  {String} view The view name
     */
    function view(view) {
        initObj(view, views, 'enter');
        currentView = views[view];
    }

    /**
     * initialise the object
     * @private
     */
    function init() {
        Function.prototype.curry = Function.prototype.partial || function curry() {
            var fn = this,
                args = Array.prototype.slice.call(arguments);
            return function () {
                var myArgs = Array.prototype.slice.call(arguments),
                    combined = [];
                var i,
                    ii,
                    l = args.length,
                    ll = myArgs.length;
                for (i = 0; i < l; i++) {
                    if (args[i] === undefined) {
                        for (ii = 0; ii < ll; ii++) {
                            combined.push(myArgs[ii]);
                        }
                    } else {
                        combined.push(args[i]);
                    }
                }
                return fn.apply(this, combined);
            };
        };
    }

    init();

    var baseUI = (0, _BaseUI2.default)(Mixin);
    var baseController = (0, _BaseController2.default)(Mixin);
    var baseView = (0, _BaseView2.default)(Mixin);

    ObjectJS.NOOP = function () {};
    ObjectJS.reqNameSpace = reqNameSpace;
    ObjectJS.requires = requires;
    ObjectJS.BASE_URL = BASE_URL;
    ObjectJS.augmentObject = _Shared.augmentObject;
    ObjectJS.initObj = initObj;
    ObjectJS.getView = getView;
    ObjectJS.view = view;
    ObjectJS.loadScript = loadScript;
    ObjectJS.err = _Shared.err;
    ObjectJS.log = _Shared.log;
    ObjectJS.warn = _Shared.warn;
    ObjectJS.createUI = baseUI.createUI;
    ObjectJS.setRootDomNode = baseUI.setRootDomNode;
    ObjectJS.createView = baseView.createView;
    ObjectJS.createController = baseController.createController;
    return ObjectJS;
}

exports.default = ojs;

},{"./BaseController":2,"./BaseUI":3,"./BaseView":4,"./Shared":8}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * @author scottvanlooy
 */
var ObjectJS = require('./ObjectJS');

var OBJMIXINS,
    UIMIXINS,
    that,
    dataObj = {},
    eventBind,
    eventPrefix;
function getAttr(str, attr) {
    return (str.split(new RegExp('\\b' + attr + '='))[1] || '').split('&')[0];
}

function hijack(callback) {
    return function (e) {
        if (!e || !e.stopPropagation) {
            e = {
                stopPropagation: window.event.cancelBubble,
                preventDefault: function preventDefault() {
                    window.event.returnValue = false;
                }
            };
        }
        callback(e);
    };
}

function NativeUI(object) {
    var i;
    for (i in OBJMIXINS) {
        if (OBJMIXINS.hasOwnProperty(i)) {
            object[i] = OBJMIXINS[i];
        }
    }
}

function NativeSelector(id, node) {
    if (!document.querySelectorAll) {
        throw 'Old browser, please use jQuery mixin';
    }
    var Node;
    // If we're just an ID, get us. getElementById is faster than querySelectorAll -
    // this currently works about 10 times faster than jQuery for single IDs and
    // nearly twice as fast for more complex queries.
    if (id.charAt(0) === '#' && id.indexOf(' ') === -1) {
        Node = [document.getElementById(id.substring(1))];
    } else {
        Node = ((node || [])[0] || document).querySelectorAll(id);
    }
    if (!Node) {
        Node = [];
    }
    augment(Node);
    return Node;
}

function checkDelay(NodeList, closure) {
    var l, ret, node;
    if (!NodeList.length) {
        NodeList = [NodeList];
    }
    l = NodeList.length;
    function r(n) {
        setTimeout(function () {
            closure();
        }, n.tdelay);
    }
    while (l--) {
        node = NodeList[l];
        if (node.tdelay) {
            if (!node.ttimers) {
                node.ttimers = [];
            }
            node.ttimers.push(r(node));
            ret = true;
        }
    }
    return ret ? augment(NodeList) : closure();
}

function NativeController(Controller) {
    Controller.createXHR = function createXHR() {
        var xhr;
        if (window.XMLHttpRequest) {
            xhr = new window.XMLHttpRequest();
        } else if (window.ActiveXObject) {
            xhr = new window.ActiveXObject('MSXML2.XMLHTTP.3.0');
        } else {
            return null;
        }
        return xhr;
    };
    Controller.createJSONP = function createJSONP(cbname) {
        var fn = typeof cbname === 'string' ? cbname : 'f' + new Date().getTime().toString(16),
            JSONP = {};
        JSONP.open = function (options) {
            var c,
                t,
                url = options.url,
                callback = options.success,
                error = options.error;
            function cb() {
                if (callback) {
                    if (c > 10000) {
                        if (error) {
                            error('Didn\'t get any data after 10s, check ?callback');
                        }
                    }
                    if (typeof dataObj[fn] !== 'undefined') {
                        callback(dataObj[fn]);
                    } else {
                        setTimeout(cb, 100);
                    }
                }
            }
            t = getAttr(url, 'callback');
            if (t) {
                fn = t;
            } else {
                c = '?callback';
                if (url.indexOf('?') !== -1) {
                    c = '&callback';
                }
                url += c + '=' + fn;
            }
            window[fn] = function (data) {
                dataObj[fn] = data;
            };
            try {
                ObjectJS.loadScript(url, cb, 1, 0, 0, error);
            } catch (ex) {
                error(ex);
            }
        };
        JSONP.error = function () {
            //something
        };
        return JSONP;
    };
}
function augment(Nodes) {
    var i;
    if (!Nodes.augmented) {
        for (i in UIMIXINS) {
            if (UIMIXINS.hasOwnProperty(i)) {
                Nodes[i] = UIMIXINS[i];
            }
        }
        Nodes.augmented = true;
    }
    return Nodes;
}
OBJMIXINS = {
    superOpen: function superOpen(callback) {
        that = that || this;
        that.domNode.style.display = 'block';
        return callback ? callback() : null;
    },
    superClose: function superClose(callback) {
        that = that || this;
        that.domNode.style.display = 'none';
        return callback ? callback() : null;
    },
    on: function on() {
        that = that || this;
        that.domNode.style.display = 'block';
    },
    off: function off() {
        that = that || this;
        that.domNode.style.display = 'none';
    }
};
UIMIXINS = {
    init: true,
    find: function find(str) {
        var nodes = this,
            l,
            nl,
            nll,
            ret = [];
        if (nodes.length) {
            nodes = [nodes];
        }
        l = nodes.length;
        while (l--) {
            nl = NativeSelector(str, nodes[l]);
            nll = nl.length;
            while (nll--) {
                ret.push(nl[nll]);
            }
        }
        return augment(ret);
    },
    remove: function remove() {
        var NodeList = this,
            ret = [],
            l = NodeList.length,
            n;
        return checkDelay(NodeList, function () {
            if (!NodeList.item && !Array.isArray(NodeList)) {
                NodeList = [NodeList];
            }
            for (n = 0; n < l; n++) {
                NodeList[n].parentNode.removeChild(NodeList[n]);
                ret.push(augment(NodeList));
            }
            return augment(ret);
        });
    },
    bind: function bind(str, func) {
        var NodeList = this,
            ret = [],
            l,
            n;
        return checkDelay(NodeList, function () {
            if (!NodeList.item) {
                NodeList = [NodeList];
            }
            l = NodeList.length;
            if (!eventBind) {
                if (NodeList[0].addEventListener) {
                    eventBind = 'addEventListener';
                    eventPrefix = '';
                } else {
                    eventBind = 'attachEvent';
                    eventPrefix = 'on';
                }
            }
            for (n = 0; n < l; n++) {
                if (NodeList[n][eventBind]) {
                    NodeList[n][eventBind](eventPrefix + str, hijack(func), true);
                }
                ret.push(augment(NodeList[n]));
            }
            return ret;
        });
    },
    addClass: function addClass(classNames) {
        var Node = this;
        function p(o, c) {
            var e = o || '',
                pa,
                l,
                ia = false,
                pia = e.indexOf(' ') !== -1,
                cia = c.indexOf(' ') !== -1,
                cs;
            if (pia || cia) {
                if (pia && cia) {
                    return ObjectJS.core.utils.ArrayUtils.combine(e.split(' '), c.split(' ')).join(' ');
                }
                pa = pia ? e.split(' ') : c.split(' ');
                cs = pia ? c : e;
                l = pa.length;
                while (l--) {
                    if (pa[l] === cs) {
                        ia = true;
                    }
                }
                if (!ia && cs !== '') {
                    pa.push(cs.trim ? cs.trim() : cs);
                }
                return pa.join(' ');
            }
            return e === '' ? c : e + ' ' + c;
        }
        return checkDelay(Node, function () {
            if (Node.length) {
                var l = Node.length;
                while (l-- && Node[l].setAttribute) {
                    Node[l].setAttribute('class', p(Node[l].getAttribute('class'), classNames));
                }
            } else if (Node.setAttribute) {
                Node.setAttribute('class', p(Node.getAttribute('class'), classNames));
            }
            return augment(Node);
        });
        // more than one class
    },
    removeClass: function removeClass(classNames) {
        var Node = this,
            node,
            ret,
            l;
        if (!Node.item) {
            Node = [Node];
        }
        l = Node.length;
        function d(o, s) {
            o.setAttribute('class', s.trim ? o.getAttribute('class').replace(s, '').trim() : o.getAttribute('class').replace(s, ''));
        }
        function m(o, cn) {
            var ca = cn.split(' '),
                cl = ca.length;
            if (cl) {
                while (cl--) {
                    d(o, ca[cl]);
                }
            } else {
                d(o, cn);
            }
        }
        function r(n) {
            return function () {
                m(n, classNames);
            };
        }
        while (l--) {
            node = Node[l];
            ret = checkDelay(node, r(node));
        }
        return Node;
    },
    setClass: function setClass(classNames) {
        var Node = this,
            node,
            ret,
            l;
        if (!Node.item) {
            Node = [Node];
        }
        l = Node.length;
        function r(n) {
            return function () {
                if (n.setAttribute) {
                    n.setAttribute('class', classNames.trim());
                }
            };
        }
        while (l--) {
            node = Node[l];
            ret = checkDelay(node, r(node));
        }
        return Node;
    },
    hasClass: function hasClass(className) {
        var i,
            n = this,
            l;
        if (!l) {
            n = [this];
        }
        l = n.length;
        for (i = 0; i < l; i++) {
            if (n[i].className && n[i].className.split && n[i].className.split(' ').indexOf(className) !== -1) {
                return true;
            }
        }
        return false;
    },
    html: function html(content) {
        var Node = this;
        return checkDelay(Node, function () {
            var ret = Node.length ? Node[0] : Node;
            if (content) {
                ret.innerHTML = content;
            }
            return ret.innerHTML && ret.innerHTML.trim ? ret.innerHTML.trim() : ret.innerHTML;
        });
    },
    randomDelay: function randomDelay(number) {
        var Node = this,
            intn,
            l;
        if (!Node.item) {
            intn = [Node];
        } else {
            intn = Node;
        }
        l = intn.length;
        while (l--) {
            augment(intn[l]).delay(Math.random() * number);
        }
        return Node;
    },
    delay: function delay(number) {
        var Node = this,
            intn,
            l;
        if (!Node.item) {
            intn = [Node];
        } else {
            intn = Node;
        }
        l = intn.length;
        while (l--) {
            if (!intn[l].tdelay) {
                intn[l].tdelay = parseInt(number, 10);
            } else {
                intn[l].tdelay += parseInt(number, 10);
            }
        }
        return Node;
    },
    hide: function hide() {
        var Node = this,
            l;
        if (!Node.item) {
            Node = [Node];
        }
        l = Node.length;
        if (!Node[0].style) {
            return Node;
        } else {
            while (l--) {
                Node[l].style.display = 'none';
            }
            return Node;
        }
    },
    show: function show() {
        var Node = this,
            l;
        if (!Node.item) {
            Node = [Node];
        }
        l = Node.length;
        while (l--) {
            Node[l].style.display = '';
        }
        return Node;
    }
};

exports.default = {
    UI: NativeUI,
    Selector: NativeSelector,
    Controller: NativeController
};

},{"./ObjectJS":7}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Native = require('./Native');

var _Native2 = _interopRequireDefault(_Native);

var _Core = require('./Core');

var _Core2 = _interopRequireDefault(_Core);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ObjectJS() {
    var core = new _Core2.default({
        Mixin: _Native2.default
    });
    if (window) {
        window.ObjectJS = core;
    }
    return core;
}
exports.default = ObjectJS();

},{"./Core":5,"./Native":6}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * If the string "debug" appears in the URL, we write to the console if there is one
 * whatever we feed into this function.
 */
function err() {
    if (window && window.console && window.location.href === 'debug') {
        window.console.error(arguments);
    }
    return true;
}
/**
 * If the string "debug" appears in the URL, we write to the console if there is one
 * whatever we feed into this function.
 */
function log() {
    if (window && window.console && window.location.href.indexOf('debug') !== -1) {
        window.console.log(arguments);
    }
    return true;
}
/**
 * If the string "debug" appears in the URL, we write to the console if there is one
 * whatever we feed into this function.
 */
function warn() {
    if (window && window.console && window.location.href.indexOf('debug') !== -1) {
        window.console.warn(arguments);
    }
    return true;
}

/**
 * Augment the object, adding a few shared methods to it.
 * @param  {Object} object the object to be augmented
 * @return {Object} the augmented object.
 */
function augmentObject(object) {
    if (typeof object === 'undefined') {
        err('tried to augment', object);
        return null;
    }
    if (!object.augmented) {
        /**
         * extend an object with another object.
         *
         * @param  {Function} item       child function
         * @param  {Function|Object} Inheritant parent function/object
         *
         * @return {Object}            Returns the object with its augmentation
         */
        object.extend = object.extend || function extend(Child, Parent) {
            if (typeof Child === 'undefined' || typeof Parent === 'undefined') {
                err('Tried to extend', Child, 'with', Parent);
                return null;
            }
            if (typeof Parent === 'function') {
                Child.prototype = new Parent();
                Child.constructor = Child;
            } else {
                Child.prototype = Parent;
                Child.constructor = Child;
            }
        };
        object.augmented = true;
    }
    return object;
}
exports.augmentObject = augmentObject;
exports.err = err;
exports.log = log;
exports.warn = warn;

},{}]},{},[7]);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
