Ext.data.JsonP.BaseController({"tagname":"class","name":"BaseController","extends":null,"mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{},"private":null,"id":"class-BaseController","members":{"cfg":[],"property":[{"name":"","tagname":"property","owner":"BaseController","meta":{},"id":"property-"}],"method":[{"name":"callView","tagname":"method","owner":"BaseController","meta":{},"id":"method-callView"},{"name":"createController","tagname":"method","owner":"BaseController","meta":{},"id":"method-createController"},{"name":"getData","tagname":"method","owner":"BaseController","meta":{},"id":"method-getData"},{"name":"tokeniser","tagname":"method","owner":"BaseController","meta":{},"id":"method-tokeniser"}],"event":[],"css_var":[],"css_mixin":[]},"linenr":9,"files":[{"filename":"BaseController.js","href":"BaseController.html#BaseController"}],"html_meta":{},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/BaseController.html#BaseController' target='_blank'>BaseController.js</a></div></pre><div class='doc-contents'><p>PRIVATE METHODS *</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='BaseController'>BaseController</span><br/><a href='source/BaseController.html#BaseController-property-' target='_blank' class='view-source'>view source</a></div><a href='#!/api/BaseController-property-' class='name not-expandable'></a><span> : Object</span></div><div class='description'><div class='short'><p>API METHODS *</p>\n</div><div class='long'><p>API METHODS *</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-callView' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='BaseController'>BaseController</span><br/><a href='source/BaseController.html#BaseController-method-callView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/BaseController-method-callView' class='name expandable'>callView</a>( <span class='pre'>namespace, view</span> ) : Object</div><div class='description'><div class='short'>On enter of your child controller, you call the view associated with that controller\nusing the callView method. ...</div><div class='long'><p>On enter of your child controller, you call the view associated with that controller\nusing the callView method. It either instantiates the view or if it already exists\nit calls \"enter\" on it. Your view's init must also call enter</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>namespace</span> : Object<div class='sub-desc'><p>your namespace</p>\n</div></li><li><span class='pre'>view</span> : string<div class='sub-desc'><p>the name of the view you're calling.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>returns the instantiated view.</p>\n</div></li></ul></div></div></div><div id='method-createController' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='BaseController'>BaseController</span><br/><a href='source/BaseController.html#BaseController-method-createController' target='_blank' class='view-source'>view source</a></div><a href='#!/api/BaseController-method-createController' class='name expandable'>createController</a>( <span class='pre'>object</span> ) : Object</div><div class='description'><div class='short'>createController - takes an object and extends it with the BaseController ...</div><div class='long'><p>createController - takes an object and extends it with the BaseController</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>to extend;</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>extended object</p>\n</div></li></ul></div></div></div><div id='method-getData' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='BaseController'>BaseController</span><br/><a href='source/BaseController.html#BaseController-method-getData' target='_blank' class='view-source'>view source</a></div><a href='#!/api/BaseController-method-getData' class='name expandable'>getData</a>( <span class='pre'>options</span> )</div><div class='description'><div class='short'>getData - gets DATA from an external resource using JSON/JSONP. ...</div><div class='long'><p>getData - gets DATA from an external resource using JSON/JSONP. Will POST\nfor JSON requests, can only GET for JSONP. Technically, JSONP is insecure,\nbe very careful when using it, make sure the 3rd party is trustworthy.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>options</span> : Object<div class='sub-desc'><p>an object containing the information you require.</p>\n\n<pre>{\n  url:{string}          the URL we get the data from. If JSONP, should either\n                        include ?callback= parameter for services that don't\n                        allow dynamic callback assignments, or be callback\n                        parameter free to allow this code to assign one.\n\n  data:{string},        name value pairs\n\n  success:{function()}, callback function on success. This will be passed\n                        a data object.\n\n  error:{function()},   callback function to do something on error. This will\n                        be passed an object representing the error.\n\n  jsonp:{string}        when set, forces JSONP with the specified string as callback name\n}\n\n</pre>\n\n</div></li></ul></div></div></div><div id='method-tokeniser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='BaseController'>BaseController</span><br/><a href='source/BaseController.html#BaseController-method-tokeniser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/BaseController-method-tokeniser' class='name expandable'>tokeniser</a>( <span class='pre'>string, tokens</span> ) : string</div><div class='description'><div class='short'>removes tokens in a string and replaces them with values. ...</div><div class='long'><p>removes tokens in a string and replaces them with values.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>string</span> : string<div class='sub-desc'><p>the string to replace tokens in:\nin the format of \"this is my/{token1}-{token2}/string/{token-3}\"</p>\n</div></li><li><span class='pre'>tokens</span> : Object<div class='sub-desc'><p>an object of tokens to replace:\n{\n  token1: 'bert',\n  token2: 'fred',\n  token3: 12\n}</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>string</span><div class='sub-desc'><p>tokenised string.</p>\n</div></li></ul></div></div></div></div></div></div></div>"});